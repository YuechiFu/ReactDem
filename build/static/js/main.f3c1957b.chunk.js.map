{"version":3,"sources":["assets/img/texture/bg.jpg","components/dateFormat/dateFormat.jsx","components/currency/currecyInput.jsx","components/daily/daily.jsx","components/currency/currency.jsx","controls/font.js","components/daily/editor.jsx","components/three/threeCanvas.jsx","components/daily/dailyReport.jsx","components/main/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","dateFormat","props","state","currentDate","fmt","this","format","date","Date","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","k","test","replace","RegExp","$1","getFullYear","substr","length","setState","getDateStr","timer","setInterval","tick","clearInterval","React","Component","Child","e","onCurrencyInputChange","target","value","currency","code","className","inputValue","onChange","handleChange","bind","require","content","stats","controls","gui","fontModel","font","renderer","camera","scene","light","rootDom","document","getElementById","w","offsetWidth","h","offsetHeight","render","onWindowResize","aspect","updateProjectionMatrix","setSize","animate","update","position","y","lightY","x","lightX","z","lightZ","requestAnimationFrame","innerHTML","querySelector","cubeX","cubeY","cubeZ","fontSize","fontHeight","datGui","dat","GUI","add","initGui","THREE","antialias","appendChild","domElement","set","load","res","size","height","center","console","log","map","skin","material","side","OrbitControls","enableDamping","enableZoom","autoRotate","minDistance","maxDistance","enablePan","Stats","dom","window","onresize","Editor","isVisible","isDelay","delayReason","list","title","time","subtasks","results","resultContent","submitTime","keyword","item","index","isInput","subIndex","splice","push","ClipBoard","htmlFor","type","name","id","onDelayRadio","placeholder","onDelayReasonInput","onClick","key","onTaskModify","disabled","Array","fill","op","subItem","onSubtaskTitleInput","onDeleteSubtask","onDAddSubtask","onDeleteTask","onAddTask","data-index","style","data-clipboard-action","data-clipboard-target","showContent","DailyReport","Main","App","width","documentElement","getBoundingClientRect","meta","createElement","head","remInit","setMeta","addEventListener","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3c1957b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.46b4c7ce.jpg\";","import React from \"react\"\nexport default class dateFormat extends React.Component{\n    constructor(props){\n        super();\n        this.state = {\n            currentDate:\"\",\n        }\n    }\n    getDateStr(){\n        let fmt = this.props.format;\n        let date = new Date();\n        let o = { \n           \"M+\" : date.getMonth()+1,                 //月份 \n           \"d+\" : date.getDate(),                    //日 \n           \"h+\" : date.getHours(),                   //小时 \n           \"m+\" : date.getMinutes(),                 //分 \n           \"s+\" : date.getSeconds(),                 //秒 \n           \"q+\" : Math.floor((date.getMonth()+3)/3), //季度 \n           \"S\"  : date.getMilliseconds()             //毫秒 \n       }; \n       if(/(y+)/.test(fmt)) {\n               fmt=fmt.replace(RegExp.$1, (date.getFullYear()+\"\").substr(4 - RegExp.$1.length)); \n       }\n        for(let k in o) {\n           if(new RegExp(\"(\"+ k +\")\").test(fmt)){\n                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n            }\n        }\n       return fmt; \n    }\n    tick(){\n        this.setState({ currentDate : this.getDateStr()});\n    }\n    componentDidMount(){\n        this.timer = setInterval(()=>this.tick())\n    }\n    componentWillUnmount(){\n        clearInterval(this.timer)\n    }\n    render(){\n\n        return(\n            <span>\n                {this.getDateStr()} \n            </span>\n        )\n        \n    \n    }\n}","import React from  \"react\";\nexport default class Child extends  React.Component {\n    constructor(){\n        super();\n        \n    }\n    handleChange(e){\n\n        this.props.onCurrencyInputChange(e.target.value,this.props.currency.code)\n    }\n    render(){\n        return (\n            <div className=\"currencyInputItem\">\n                <span>{this.props.currency.code}</span>\n                <div className=\"input-box\">\n                <input \n                    className=\"input-ele\"  \n                    value={this.props.inputValue}\n                    onChange={this.handleChange.bind(this)}\n                    />\n                </div>\n            </div>\n            \n        )\n    }\n}","import React from \"react\";\nimport DateFormat from \"../dateFormat/dateFormat\";\nimport \"../../assets/style/daily.scss\";\nimport ClipBoard from \"clipboard\";\nexport default class Daily extends React.Component{\n    constructor(props){\n        super();\n        this.state = {\n                isVisible : false,\n                date:\"\",\n                isDelay : false ,\n                delayReason : \"\",\n                list:[{\n                    title : \"\",\n                    time : 0,\n                    subtasks : [],\n                    results : [],\n                    resultContent : ''\n                }],\n                submitTime :\"\",\n        }\n    }\n    componentDidMount(){\n       \n    }\n    onDelayRadio(e,isDelay){\n        console.log(isDelay)\n        this.setState({isDelay:e.target.value})\n    }\n    onDelayReasonInput(e){\n        this.setState({delayReason:e.target.value})\n    }\n \n    onTaskModify(keyword,item,index,isInput,e){\n        let list  = [...this.state.list];\n        list[index][keyword] = isInput ?  e.target.value : '' ;\n        this.setState({list}) \n    }\n    onSubtaskTitleInput(item,index,subIndex,isInput,e){\n        let list  = [...this.state.list];\n        list[index][\"subtasks\"][subIndex][\"title\"] = isInput ?  e.target.value : '' ;\n        this.setState({list})\n    }\n    onDeleteTask(item,index,e){\n        let list = [...this.state.list]\n        list.splice(index,1);\n        this.setState({list})\n    }\n    onAddTask(){\n        let list = [...this.state.list];\n        list.push({\n            title : \"\",\n            time : 0,\n            subtasks : [],\n            results : [],\n            resultContent : ''\n        })\n        this.setState({list});\n        \n    }\n    onDeleteSubtask(item,index,subIndex){\n        let list = [...this.state.list];\n        list[index][\"subtasks\"].splice(subIndex,1);\n        this.setState({list})\n    }\n    onDAddSubtask(index){\n        let list = [...this.state.list];\n        list[index][\"subtasks\"].push({title:\"\"});\n        this.setState({list})\n    }\n    showContent(){\n        this.setState({isVisible:!this.state.isVisible})\n    }\n    componentDidMount(){\n        new ClipBoard('.copy-task-contents');}\n    render(){\n        return(\n            <div className=\"page-wrapper\" >\n                <div className=\"task-form-box\">\n                    <div className=\"task-form\">\n                        <div className=\"form-item delay-radio\">\n                            <div className=\"form-item-wrapper\">\n                                <div className=\"item-input\">\n                                    <div className=\"input-box\">\n                                        <label htmlFor=\"task-finish\" className={this.state.isDelay ? \"\" : \"checked\"}>finished</label>\n                                        <input  type=\"radio\"         \n                                                className=\"radio-ele\" \n                                                name=\"delay\" \n                                                value = {''}\n                                                id = \"task-finish\"\n                                                onChange = {this.onDelayRadio.bind(this)}\n                                        />\n                                    </div>\n                                    <div className=\"input-box\">\n                                        <label htmlFor=\"task-delay\" className={this.state.isDelay ? \"checked\" : \"\"}>delay</label>\n                                        <input  type=\"radio\"         \n                                                className=\"radio-ele\" \n                                                name=\"delay\" \n                                                value = {true}\n                                                id = \"task-delay\"\n                                                onChange = {this.onDelayRadio.bind(this)}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {\n                            this.state.isDelay && \n                            <div className=\"form-item delay-reason-input\">\n                                <div className=\"form-item-wrapper\">\n                                    <div className=\"item-input\">\n                                        <div className=\"input-box\">\n                                            <textarea \n                                                name=\"delay-reason\" \n                                                className=\"input-ele\" \n                                                id=\"delay-reason\" \n                                                placeholder=\"\" \n                                                onChange={this.onDelayReasonInput.bind(this)}\n                                                value={this.state.delayReason}\n                                                >\n                                                \n                                            </textarea>\n                                            task.delayReason.length && <div className=\"clear-btn\" onClick = {()=>this.setState({delayReason:''})}>x</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className=\"form-task-list-input-box\">\n                            <div className=\"form-task-list-input\">\n                                {\n                                   this.state.list.map(function(item,index){\n                                        return (\n                                            <div className=\"form-item task-list-item\" key={'form-task-'+index}>\n                                                <div className=\"form-item-wrapper\">\n                                                    <div className=\"item-input\">\n                                                        <div className=\"input-box\">\n                                                            <input type=\"text\" className=\"task-title-input input-ele\"\n                                                            id={'task'+index+'title'}\n                                                            placeholder={'task '+(index+1)+' title'}\n                                                            value={item.title}\n                                                            onChange = {this.onTaskModify.bind(this,'title',item,index,true)}\n                                                            />\n                                                            item.title.length && <div className=\"clear-btn\" onClick = {this.onTaskModify.bind(this,'title',item,index,false)}>x</div>\n                                                        </div>\n                                                        <div className=\"input-box\">\n                                                            <input type=\"text\" \n                                                                    className=\"task-time-input input-ele\" \n                                                                    id={'task-'+index+'-time-input'}\n                                                                    value={item.time}\n                                                                    onChange = {this.onTaskModify.bind(this,'time',item,index,true)}\n                                                                    placeholder={'task '+index+' spend'}\n                                                                    />\n                                                            <select \n                                                                name={'task-'+index+'-time'}\n                                                                className=\"select-ele\"\n                                                                id={'task-'+index+'-time-select'}\n                                                                value={item.time}\n                                                                onChange={this.onTaskModify.bind(this,'time',item,index,true)}\n                                                                >\n                                                                <option value={0}  disabled>0 h</option>\n                                                                {\n                                                                    new Array(24).fill('').map((op,h)=>(<option key={h} value={(h+1)*0.5}> {(h+1)*0.5}h </option> ))\n                                                                }\n                                                            </select>\n                                                        </div>\n                                                        <div className=\"input-box\">\n                                                            <textarea \n                                                                className=\"task-content-input input-ele\" \n                                                                id={'task-'+index+'-content'}\n                                                                value={item.resultContent}\n                                                                onChange={this.onTaskModify.bind(this,'resultContent',item,index,true)}\n                                                            ></textarea>\n                                                            item.resultContent.length && <div className=\"clear-btn\" onClick = {this.onTaskModify.bind(this,'resultContent',item,index,false)}>x</div>\n                                                        </div>\n                                                        {   item.subtasks.length && \n                                                            <div className=\"subtask-input-list-box\">\n                                                                <div className=\"subtask-input-list\">\n                                                                    {item.subtasks.map((subItem,subIndex)=>(\n                                                                        <div className=\"subtask-input-item\" key={'subtask-input-'+subIndex}>\n                                                                            <div className=\"subtask-input input-box\">\n                                                                                <input type=\"text\"          \n                                                                                    className=\"subtask-input-ele input-ele\" \n                                                                                    id={'task-'+index+'-subtask-'+subIndex}\n                                                                                    placeholder={'subtask-'+(subIndex+1) }\n                                                                                    value={subItem.title}\n                                                                                    onChange={this.onSubtaskTitleInput.bind(this,item,index,subIndex,true)}\n                                                                                />\n                                                                                subItem.title.length && <div className=\"clear-btn\" onClick = {this.onSubtaskTitleInput.bind(this,item,index,subIndex,false)}>x</div>\n                                                                            </div>\n                                                                            <div className=\"btn-box\">\n                                                                                <div className=\"delete-btn btn\" onClick={this.onDeleteSubtask.bind(this,item,index,subIndex)}></div>\n                                                                            </div>\n                                                                        </div>\n                                                                    ))}\n                                                                </div>\n                                                            </div>\n                                                            \n                                                        }\n                                                         <div className=\"btn-box\"><div className=\"btn add-subtask-btn\" onClick={this.onDAddSubtask.bind(this,index)}>+</div></div>\n                                                    </div>\n                                                    <div className=\"task-delete-btn  btn\" onClick={this.onDeleteTask.bind(this,item,index)}>x</div>\n                                                </div>\n                                            </div>\n                                        ) \n                                   }.bind(this))\n                                }\n                               \n                            </div>\n                            <div className=\"btn-box\">\n                            <div className=\"add-task-btn btn\" onClick={this.onAddTask.bind(this)}>add</div>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            \n                <div  className={this.state.isVisible ?'visible task-format-content-box':'task-format-content-box' }>\n                    <div className=\"task-format-content\" id=\"task-contents\">\n                        <div className=\"content-wrapper\">\n                            <h2 className=\"task-date\"><DateFormat format=\"yyyy/MM/dd hh:mm:ss\"></DateFormat> <span>{this.state.isDelay ? '需延期' : '无延期'}</span></h2> \n                            <div className=\"delay-reason-info\">\n                                {this.state.isDelay && <span>延期原因:</span> }\n                                {this.state.delayReason && <span>{this.state.delayReason}</span>}\n                            </div>\n                            <p>-------</p>\n                            <div className=\"task-list-content-box\">\n                                <div className=\"task-list-content\">\n                                    {\n                                        this.state.list.map((item,index)=>(\n                                            <div className=\"task-item-content\"\n                                                key={index}\n                                                data-index={index}\n                                            >\n                                                <h3 className=\"task-item-title\">$ 任务{index+1} : <span></span>{item.title}</h3>\n                                                <div className=\"task-item-time\" >$ 耗时<span> : </span>{item.time}h</div>\n                                                <div className=\"task-item-result\">\n                                                    <span>$ 量化产出 :</span>\n                                                    <p> {item.resultContent}</p>\n                                                    <ul v-if=\"item.subtasks.length\">\n                                                        {\n                                                            item.subtasks.map((subItem,subIndex)=>(\n                                                                <li key={'p'+subIndex}>\n                                                                    <span> {subIndex+1}.</span>\n                                                                    {subItem.title.length && <span >{subItem.title};</span>}\n                                                                </li>\n                                                            ))\n                                                        }\n                                                    \n                                                    </ul>\n                                                    <p style={{'overflow':'hidden'}}>===========================</p>\n                                                </div>\n                                                \n                                            </div>\n                                        ))\n                                    }\n                                    \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    </div>\n                \n                \n                <div \n                    className=\"copy-btn copy-task-contents btn\" \n                    data-clipboard-action=\"copy\" \n                    data-clipboard-target=\"#task-contents\" \n                    >copy</div> \n                <div className=\"showContent-btn btn\" onClick={this.showContent.bind(this)}>show</div>\n\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport \"../../assets/style/common.scss\";\nimport CurrencyInput from './currecyInput'\nexport default  class Demo1 extends React.Component{\n    constructor(){\n        super();\n        this.state ={\n            currencyValue : 0,\n            resultValue:0,\n            currencyList:{\n                usd : {\n                    symbol : \"$\",\n                    code:\"usd\",\n                    rate:7.0,\n                },\n                cny:{\n                    symbol : \"¥\",\n                    code:\"cny\",\n                    rate : 1.0\n                }\n            }\n        }\n    }\n    handleChange(value,key){\n         this.setState({resultValue:value})\n        let rate = this.state.currencyList[key][\"rate\"];\n        let result = parseFloat(value*rate);\n        result = this.state.currencyList[key][\"symbol\"] + result;\n        console.log(value,rate,result)\n        // this.setState({resultValue:result})\n    }\n    render(){\n        return(\n            <div className='page-wrapper'>  \n                <h3>汇率换算</h3>\n                {\n                    Object\n                    .values(this.state.currencyList)\n                    .map((item,index)=>{\n                        return (\n                            <CurrencyInput \n                                currency = {item}\n                                onCurrencyInputChange={this.handleChange.bind(this)}\n                                inputValue={this.state.resultValue}\n                                key = {index}\n                            ></CurrencyInput>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}","import * as THREE from 'three';\nimport { OrbitControls } from '@jsm/controls/OrbitControls.js';\nimport Stats from '@jsm/libs/stats.module.js';\nimport dat from '@jsm/libs/dat.gui.module.js';\nimport skin from '@img/texture/bg.jpg'\n// import fontFile from '@fonts/gentilis_regular.typeface.json'\n// console.log(fontFile)\n\nconst path = require(\"path\")\n\n// console.log(paths)\nexport default function(content){\n\n// 根元素\n\nlet rootDom = document.getElementById('3d-canvas');\nlet w = rootDom.offsetWidth;\nlet h = rootDom.offsetHeight;\nrootDom.innerHTML = ''\n\n// 初始化性能插件\nlet stats;\nfunction initStats() {\n  stats = new Stats();\n  rootDom.appendChild(stats.dom);\n}\n\n// 初始化交互插件\nlet controls;\nfunction initControls() {\n    controls = new OrbitControls( camera, renderer.domElement );\n    // 如果使用animate方法时，将此函数删除\n    //controls.addEventListener( 'change', render );\n    // 使动画循环使用时阻尼或自转 意思是否有惯性\n    controls.enableDamping = false;\n    //动态阻尼系数 就是鼠标拖拽旋转灵敏度\n    //controls.dampingFactor = 0.25;\n    //是否可以缩放\n    controls.enableZoom = true;\n    //是否自动旋转\n    controls.autoRotate = false;\n    //d\n    controls.minDistance  = 200;\n    //设置相机距离原点的最远距离\n    controls.maxDistance  = 600;\n    //是否开启右键拖拽\n    controls.enablePan = true;\n}\n\n  //初始化dat.GUI简化试验流程\n  let gui;\n  function initGui() {\n      if(document.querySelector('.dg.ac') ){\n        document.querySelector('.dg.ac').innerHTML = ''\n      }\n      //声明一个保存需求修改的相关数据的对象\n      gui = {\n          lightY: 100, //灯光y轴的位置\n          lightX: 100, //灯光X轴的位置\n          lightZ: 100, //灯光Z轴的位置\n          cubeX: 25, //立方体的x轴位置\n          cubeY: 10, //立方体的x轴位置\n          cubeZ: -5, //立方体的z轴的位置\n          fontSize : 60,\n          fontHeight : 10,\n      };\n      var datGui = new dat.GUI();\n      //将设置属性添加到gui当中，gui.add(对象，属性，最小值，最大值）\n      datGui.add(gui, \"lightY\", 0, 100);\n      datGui.add(gui, \"lightX\", 0, 100);\n      datGui.add(gui, \"lightZ\", 0, 100);\n      datGui.add(gui, \"cubeX\", -30, 301);\n      datGui.add(gui, \"cubeY\", -30, 30);\n      datGui.add(gui, \"cubeZ\", -30, 30);\n      datGui.add(gui, \"fontSize\", 16, 200);\n      datGui.add(gui, \"fontHeight\", 20, 400);\n  }\n  var fontModel;\n  var font;\n  function initModel() {\n    var loader = new THREE.FontLoader();\n     loader.load( 'https://threejs.org/examples/fonts/gentilis_bold.typeface.json', function (res) {\n        font = new THREE.TextBufferGeometry(content, {\n            font:  res,\n            size: gui.fontSize,\n            height: gui.fontHeight,\n        });\n\n        font.center();\n        console.log(font)\n        var map = new THREE.TextureLoader().load(skin);\n        var material = new THREE.MeshLambertMaterial({map:map,side:THREE.DoubleSide});\n\n        fontModel = new THREE.Mesh(font,material);\n\n        scene.add(fontModel);\n     })\n}\n    var renderer;\n    function initRender() {\n        renderer = new THREE.WebGLRenderer({antialias: true});\n        renderer.setSize(w, h);\n        rootDom.appendChild(renderer.domElement);\n    }\n\n    var camera;\n    function initCamera() {\n        camera = new THREE.PerspectiveCamera(45, w / h, 1, 10000);\n        camera.position.set(0, 0, 400);\n    }\n\n    var scene;\n    function initScene() {\n        scene = new THREE.Scene();\n    }\n\n    var light;\n    function initLight() {\n        scene.add(new THREE.AmbientLight(0xffffff));\n        light = new THREE.DirectionalLight(0xffffff);\n        light.position.set(gui.lightX, gui.lightZ, gui.lightY);\n        scene.add(light);\n    }\n\n    function render() {\n      renderer.render(scene, camera);\n  }\n\n  //窗口变动触发的函数\n  function onWindowResize() {\n      camera.aspect = w / h;\n      camera.updateProjectionMatrix();\n      render();\n      renderer.setSize(w,h);\n\n  }\n\n  function animate() {\n\n        //更新相关位置\n      //更新控制器\n      controls.update();\n      render();\n      stats.update();\n\n      light.position.y = gui.lightY;\n      light.position.x = gui.lightX;\n      light.position.z= gui.lightZ;\n    //   font.size = gui.fontSize;\n    //   font.height = gui.fontHeight\n      //更新性能插件\n      requestAnimationFrame(animate);\n  }\n\n  function draw() {\n    initGui();\n      initRender();\n      initScene();\n      initCamera();\n      initLight();\n      initModel();\n      initControls();\n      initStats();\n\n      animate();\n      window.onresize = onWindowResize;\n  }\n  draw()\n\n}","import React from \"react\";\nimport DateFormat from \"../dateFormat/dateFormat\";\nimport \"@style/daily.scss\";\nimport ClipBoard from \"clipboard\";\nexport default class Editor extends React.Component{\n    constructor(props){\n        super();\n        this.state = {\n                isVisible : false,\n                date:\"\",\n                isDelay : false ,\n                delayReason : \"\",\n                list:[{\n                    title : \"\",\n                    time : 0,\n                    subtasks : [],\n                    results : [],\n                    resultContent : ''\n                }],\n                submitTime :\"\",\n        }\n    }\n    componentDidMount(){\n       \n    }\n    onDelayRadio(e,isDelay){\n        console.log(isDelay)\n        this.setState({isDelay:e.target.value})\n    }\n    onDelayReasonInput(e){\n        this.setState({delayReason:e.target.value})\n    }\n \n    onTaskModify(keyword,item,index,isInput,e){\n        let list  = [...this.state.list];\n        list[index][keyword] = isInput ?  e.target.value : '' ;\n        this.setState({list}) \n    }\n    onSubtaskTitleInput(item,index,subIndex,isInput,e){\n        let list  = [...this.state.list];\n        list[index][\"subtasks\"][subIndex][\"title\"] = isInput ?  e.target.value : '' ;\n        this.setState({list})\n    }\n    onDeleteTask(item,index,e){\n        let list = [...this.state.list]\n        list.splice(index,1);\n        this.setState({list})\n    }\n    onAddTask(){\n        let list = [...this.state.list];\n        list.push({\n            title : \"\",\n            time : 0,\n            subtasks : [],\n            results : [],\n            resultContent : ''\n        })\n        this.setState({list});\n        \n    }\n    onDeleteSubtask(item,index,subIndex){\n        let list = [...this.state.list];\n        list[index][\"subtasks\"].splice(subIndex,1);\n        this.setState({list})\n    }\n    onDAddSubtask(index){\n        let list = [...this.state.list];\n        list[index][\"subtasks\"].push({title:\"\"});\n        this.setState({list})\n    }\n    showContent(){\n        this.setState({isVisible:!this.state.isVisible})\n    }\n    componentDidMount(){\n        new ClipBoard('.copy-task-contents');}\n    render(){\n        return(\n            <div className=\"page-wrapper\" >\n                <div className=\"task-form-box\">\n                    <div className=\"task-form\">\n                        <div className=\"form-item delay-radio\">\n                            <div className=\"form-item-wrapper\">\n                                <div className=\"item-input\">\n                                    <div className=\"input-box\">\n                                        <label htmlFor=\"task-finish\" className={this.state.isDelay ? \"\" : \"checked\"}>finished</label>\n                                        <input  type=\"radio\"         \n                                                className=\"radio-ele\" \n                                                name=\"delay\" \n                                                value = {''}\n                                                id = \"task-finish\"\n                                                onChange = {this.onDelayRadio.bind(this)}\n                                        />\n                                    </div>\n                                    <div className=\"input-box\">\n                                        <label htmlFor=\"task-delay\" className={this.state.isDelay ? \"checked\" : \"\"}>delay</label>\n                                        <input  type=\"radio\"         \n                                                className=\"radio-ele\" \n                                                name=\"delay\" \n                                                value = {true}\n                                                id = \"task-delay\"\n                                                onChange = {this.onDelayRadio.bind(this)}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {\n                            this.state.isDelay && \n                            <div className=\"form-item delay-reason-input\">\n                                <div className=\"form-item-wrapper\">\n                                    <div className=\"item-input\">\n                                        <div className=\"input-box\">\n                                            <textarea \n                                                name=\"delay-reason\" \n                                                className=\"input-ele\" \n                                                id=\"delay-reason\" \n                                                placeholder=\"\" \n                                                onChange={this.onDelayReasonInput.bind(this)}\n                                                value={this.state.delayReason}\n                                                >\n                                                \n                                            </textarea>\n                                            task.delayReason.length && <div className=\"clear-btn\" onClick = {()=>this.setState({delayReason:''})}>x</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className=\"form-task-list-input-box\">\n                            <div className=\"form-task-list-input\">\n                                {\n                                   this.state.list.map(function(item,index){\n                                        return (\n                                            <div className=\"form-item task-list-item\" key={'form-task-'+index}>\n                                                <div className=\"form-item-wrapper\">\n                                                    <div className=\"item-input\">\n                                                        <div className=\"input-box\">\n                                                            <input type=\"text\" className=\"task-title-input input-ele\"\n                                                            id={'task'+index+'title'}\n                                                            placeholder={'task '+(index+1)+' title'}\n                                                            value={item.title}\n                                                            onChange = {this.onTaskModify.bind(this,'title',item,index,true)}\n                                                            />\n                                                            item.title.length && <div className=\"clear-btn\" onClick = {this.onTaskModify.bind(this,'title',item,index,false)}>x</div>\n                                                        </div>\n                                                        <div className=\"input-box\">\n                                                            <input type=\"text\" \n                                                                    className=\"task-time-input input-ele\" \n                                                                    id={'task-'+index+'-time-input'}\n                                                                    value={item.time}\n                                                                    onChange = {this.onTaskModify.bind(this,'time',item,index,true)}\n                                                                    placeholder={'task '+index+' spend'}\n                                                                    />\n                                                            <select \n                                                                name={'task-'+index+'-time'}\n                                                                className=\"select-ele\"\n                                                                id={'task-'+index+'-time-select'}\n                                                                value={item.time}\n                                                                onChange={this.onTaskModify.bind(this,'time',item,index,true)}\n                                                                >\n                                                                <option value={0}  disabled>0 h</option>\n                                                                {\n                                                                    new Array(24).fill('').map((op,h)=>(<option key={h} value={(h+1)*0.5}> {(h+1)*0.5}h </option> ))\n                                                                }\n                                                            </select>\n                                                        </div>\n                                                        <div className=\"input-box\">\n                                                            <textarea \n                                                                className=\"task-content-input input-ele\" \n                                                                id={'task-'+index+'-content'}\n                                                                value={item.resultContent}\n                                                                onChange={this.onTaskModify.bind(this,'resultContent',item,index,true)}\n                                                            ></textarea>\n                                                            item.resultContent.length && <div className=\"clear-btn\" onClick = {this.onTaskModify.bind(this,'resultContent',item,index,false)}>x</div>\n                                                        </div>\n                                                        {   item.subtasks.length && \n                                                            <div className=\"subtask-input-list-box\">\n                                                                <div className=\"subtask-input-list\">\n                                                                    {item.subtasks.map((subItem,subIndex)=>(\n                                                                        <div className=\"subtask-input-item\" key={'subtask-input-'+subIndex}>\n                                                                            <div className=\"subtask-input input-box\">\n                                                                                <input type=\"text\"          \n                                                                                    className=\"subtask-input-ele input-ele\" \n                                                                                    id={'task-'+index+'-subtask-'+subIndex}\n                                                                                    placeholder={'subtask-'+(subIndex+1) }\n                                                                                    value={subItem.title}\n                                                                                    onChange={this.onSubtaskTitleInput.bind(this,item,index,subIndex,true)}\n                                                                                />\n                                                                                subItem.title.length && <div className=\"clear-btn\" onClick = {this.onSubtaskTitleInput.bind(this,item,index,subIndex,false)}>x</div>\n                                                                            </div>\n                                                                            <div className=\"btn-box\">\n                                                                                <div className=\"delete-btn btn\" onClick={this.onDeleteSubtask.bind(this,item,index,subIndex)}></div>\n                                                                            </div>\n                                                                        </div>\n                                                                    ))}\n                                                                </div>\n                                                            </div>\n                                                            \n                                                        }\n                                                         <div className=\"btn-box add-subtask\"><div className=\"btn add-subtask-btn\" onClick={this.onDAddSubtask.bind(this,index)}>+</div></div>\n                                                    </div>\n                                                    <div className=\"task-delete-btn  btn\" onClick={this.onDeleteTask.bind(this,item,index)}>x</div>\n                                                </div>\n                                            </div>\n                                        ) \n                                   }.bind(this))\n                                }\n                               \n                            </div>\n                            <div className=\"btn-box add-task\">\n                            <div className=\"add-task-btn btn\" onClick={this.onAddTask.bind(this)}>add a new task</div>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            \n                <div  className={this.state.isVisible ?'visible task-format-content-box':'task-format-content-box' }>\n                    <div className=\"task-format-content\" id=\"task-contents\">\n                        <div className=\"content-wrapper\">\n                            <h2 className=\"task-date\"><DateFormat format=\"yyyy-MM-dd\"></DateFormat> <span>{this.state.isDelay ? '需延期' : '无延期'}</span></h2> \n                            <div className=\"delay-reason-info\">\n                                {this.state.isDelay && <span>延期原因:</span> }\n                                {this.state.delayReason && <span>{this.state.delayReason}</span>}\n                            </div>\n                            <p>——————————————————</p>\n                            <div className=\"task-list-content-box\">\n                                <div className=\"task-list-content\">\n                                    {\n                                        this.state.list.map((item,index)=>(\n                                            <div className=\"task-item-content\"\n                                                key={index}\n                                                data-index={index}\n                                            >\n                                                <h3 className=\"task-item-title\">◉ 任务 {index+1} : <span></span>{item.title}</h3>\n                                                <div className=\"task-item-time\" >◉ 耗时<span> : </span>{item.time}h</div>\n                                                <div className=\"task-item-result\">\n                                                    <span>◉ 量化产出 : {item.resultContent}</span>\n                                                    {item.subtasks.length && <ul>\n                                                    <p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>-------</p>\n                                                        {\n                                                            item.subtasks.map((subItem,subIndex)=>(\n                                                                <li key={'p'+subIndex}>\n                                                                    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                                                                    <span>{subIndex+1}.</span>\n                                                                    <span >{subItem.title}</span>\n                                                                </li>\n                                                            ))\n                                                        }\n                                                    \n                                                    </ul>\n                                                    }\n                                                    <p style={{'overflow':'hidden'}}>——————————————————</p>\n                                                </div>\n                                            </div>\n                                        ))\n                                    }\n                                    \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    </div>\n                \n                \n                <div \n                    className=\"copy-btn copy-task-contents btn\" \n                    data-clipboard-action=\"copy\" \n                    data-clipboard-target=\"#task-contents\" \n                    onClick={this.showContent.bind(this)}\n                    >copy</div> \n                <div className=\"showContent-btn btn\" onClick={this.showContent.bind(this)}>{this.state.isVisible ? 'hide' : 'show'}</div>\n\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport react from \"react/cjs/react.development\";\nimport init3D from \"@controls/font\";\nexport default class extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      inputVal:\"\"\n    }\n\n  }\n  changeVal(e){\n    this.setState({\n      inputVal:e.target.value\n    })\n  }\n  componentDidUpdate(){\n    console.log(document.getElementById(\"3d-canvas\"));\n    init3D(this.state.inputVal);\n  }\n  componentDidMount(){\n    console.log(document.getElementById(\"3d-canvas\"))\n    init3D(this.state.inputVal);\n  }\n  render(){\n    return( \n      <div className=\"three-container\">\n        <div id=\"3d-canvas\" style={{'width':'100%','height':'100px','margin':'0 auto'}}></div>\n        <input type=\"text\" onBlur={this.changeVal.bind(this)}/>\n      </div>\n      \n    )\n  }\n}","import React from \"react\";\nimport DateFormat from \"../dateFormat/dateFormat\";\nimport \"../../assets/style/daily.scss\";\nimport Editor from \"@components/daily/editor\"\nexport default class DailyReport extends React.Component{\n  constructor(){\n    super();\n    this.state ={\n\n    }\n  }\n  render(){\n    return(\n      <Editor></Editor>\n    )\n  }\n} ","import \"../../assets/style/main.scss\";\nimport React from \"react\";\nimport Daily from \"../daily/daily\";\nimport Currency from \"../currency/currency\";\nimport ThreeCanvas from \"@components/three/threeCanvas\";\nimport DailyReport from \"@components/daily/dailyReport\"\n\nexport default class Main extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n           \n        }\n    }\n    render(){\n        return(\n            <div className=\"container\"> \n                <DailyReport></DailyReport>\n            </div>\n            \n        )\n    }\n\n}","import React from \"react\";  \nimport Main from \"./components/main/main\"\nclass App extends React.Component{\n  // eslint-disable-next-line \n  constructor(){\n    super(); \n  }\n  remInit(){\n    let width = document.documentElement.getBoundingClientRect().width;\n    let size ;\n    if(width <= 375) size = 100\n    if(width > 375)  size = width / 375 * 100\n    if(width > 768)  size = width / 768 * 100\n    if(width > 1200) size = width / 1200 * 100\n    document.documentElement.style.fontSize = size   + \"px\"\n  }\n  setMeta(){\n    let meta  = document.createElement(\"meta\");\n    meta.name = \"viewport\";\n    meta.content = \"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"\n   if(document.head.querySelector(\"meta[name='viewport']\")){\n    document.head.querySelector(\"meta[name='viewport']\").content = meta.content;\n   }else{\n    document.head.appendChild(meta)\n   }\n  }\n  render(){\n    let self = this ;\n    this.remInit();\n    this.setMeta();\n    window.addEventListener(\"resize\",self.remInit);\n\n    return(\n    <Main></Main>\n  )}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}